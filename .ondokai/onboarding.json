{
  "project_metadata": {
    "name": "DOM Element Hierarchical Finder - Biblioteca TypeScript para busca e manipulação avançada de elementos HTML via hierarquias",
    "domain": [
      "Web/Mobile/Desktop",
      "Front-end Web Development",
      "DOM Manipulation",
      "UI Automation",
      "UI Testing",
      "Code Editor Customization",
      "Accessibility",
      "Static Code Analysis",
      "Form Handling"
    ],
    "current_phase": [
      "Production",
      "Development",
      "Stable",
      "Maintenance"
    ],
    "critical_business_rules": [
      "Manter integridade do repositório ignorando arquivos temporários e dependências",
      "Manter consistência de estilo para facilitar manutenção e colaboração",
      "Busca precisa e hierárquica de elementos DOM",
      "Respeito a timeout em buscas assíncronas",
      "Manutenção da tipagem estrita",
      "Garantir código limpo e sem erros de tipagem",
      "Prevenir uso de variáveis não utilizadas",
      "Manter formatação consistente",
      "Garantir versões fixas das dependências para evitar inconsistências no ambiente de desenvolvimento",
      "Compatibilidade com Node.js >=24",
      "Manter integridade da hierarquia DOM durante manipulações",
      "Suporte a regex para atributos",
      "Retorno do primeiro elemento válido",
      "Manter precisão na correspondência hierárquica",
      "Não retornar elementos fora da hierarquia especificada",
      "Consistência na identificação de elementos DOM para templates",
      "Manter integridade dos atributos para renderização correta",
      "Attributes must be accurately typed",
      "Regex flags must be correctly handled",
      "Timeouts must be respected to avoid blocking UI",
      "Element hierarchy must be strictly matched",
      "Garantir código estrito e sem erros implícitos",
      "Separação clara entre código fonte e build",
      "Exclusão de arquivos de teste do build",
      "Não versionar dependências instaladas",
      "Não versionar arquivos de configuração local e sensíveis",
      "Ignorar caches e arquivos temporários para garantir repositório limpo",
      "Configuração única e consistente via Singleton",
      "Logs controlados para não poluir output",
      "Erros devem ser claros e específicos para facilitar debugging",
      "Códigos de erro únicos e consistentes",
      "Preservação do stack trace para análise",
      "Seletores devem identificar corretamente botões de ação para garantir automação confiável",
      "Seletores devem refletir com precisão as classes CSS para garantir funcionamento correto do editor interativo",
      "Seletores devem identificar corretamente textareas editáveis para evitar manipulação incorreta",
      "Não alterar atributos dos seletores sem validação",
      "Consistência e tipagem correta dos seletores",
      "Modularidade e organização clara dos exports",
      "Seletores devem refletir com precisão a estrutura DOM do Monaco Editor",
      "Manter compatibilidade com versões do editor",
      "Selector uniqueness",
      "Accurate multiplicity handling",
      "Validation before search"
    ]
  },
  "technical_stack": {
    "primary_language": [
      "TypeScript",
      "JavaScript (Node.js)"
    ],
    "frameworks": [
      "Node.js 24+",
      "ES Modules",
      "ESLint",
      "Prettier",
      "esbuild"
    ],
    "databases": [],
    "external_services": [],
    "package_manager": [
      "npm",
      "yarn",
      "pnpm"
    ]
  },
  "architecture_patterns": {
    "design_pattern": [
      "Modular ES Modules",
      "Functional Programming",
      "Declarative Configuration Pattern",
      "Singleton",
      "Custom Error Handling",
      "Strict typing enforcement",
      "Separation of Concerns",
      "Barrel export",
      "Polling with timeout",
      "Typed interface Definition"
    ],
    "folder_structure": [
      "src/ - código fonte TypeScript",
      "dist/ - artefatos compilados",
      "node_modules - dependências",
      "tests/ - testes unitários",
      "scripts/ - scripts de build e dev",
      "src/types - definições de tipos TypeScript",
      "src/utils - funções utilitárias",
      "src/selectors - Seletores de elementos DOM",
      "types/ - definição de tipos e interfaces",
      "components/ - componentes UI",
      "config/ - arquivos de configuração",
      "modules/ - módulos funcionais",
      "errors/ - classes de erro customizadas",
      "logs/ - arquivos de log",
      "tmp/ - arquivos temporários",
      ".vscode/ - configurações IDE"
    ],
    "naming_conventions": [
      "camelCase para variáveis e funções",
      "PascalCase para classes, tipos e interfaces",
      "kebab-case para arquivos e pacotes",
      "UPPER_SNAKE_CASE para constantes",
      "prefixo 'Selector' para arrays de seletores",
      "Erros terminam com 'Error'",
      "Arquivos com extensão .ts para TypeScript"
    ],
    "module_boundaries": [
      "Separação clara entre funções de busca, tipos e utilitários",
      "Dependência unidirecional para evitar acoplamento",
      "Separação clara entre código fonte e arquivos gerados",
      "Separação clara entre devDependencies e optionalDependencies",
      "Uso de ES Modules para import/export",
      "Módulos isolados por responsabilidade",
      "Separação clara entre tipos, validação e busca",
      "Exportação explícita de seletores para uso externo",
      "Configuração isolada do DOM Finder",
      "Módulo isolado para erros DOM, sem dependências externas"
    ]
  },
  "code_standards": {
    "style_guide": [
      "Prettier",
      "ESLint recommended",
      "TypeScript ESLint recommended",
      "Airbnb TypeScript Style Guide",
      "JSDoc para documentação"
    ],
    "linting_rules": [
      "Configuração de Prettier para formatação automática",
      "Regras ESLint para evitar erros comuns e manter consistência",
      "no-unused-vars: error",
      "no-explicit-any: warn",
      "explicit-function-return-type: error",
      "no-floating-promises: error",
      "prefer-const: error",
      "no-var: error",
      "no-console: warn",
      "no-debugger: error",
      "prettier/prettier: error",
      "strict: true",
      "noImplicitAny",
      "noUnusedLocals",
      "noUnusedParameters",
      "noImplicitReturns",
      "strict typing enforced"
    ],
    "formatting": [
      "semi: true",
      "trailingComma: all",
      "singleQuote: true",
      "printWidth: 100",
      "tabWidth: 2",
      "useTabs: false",
      "quoteProps: as-needed",
      "jsxSingleQuote: true",
      "bracketSpacing: true",
      "bracketSameLine: false",
      "arrowParens: always",
      "endOfLine: lf",
      "embeddedLanguageFormatting: auto",
      "htmlWhitespaceSensitivity: css",
      "insertPragma: false",
      "proseWrap: preserve",
      "requirePragma: false",
      "vueIndentScriptAndStyle: false",
      "Prettier integrado via eslint-plugin-prettier"
    ],
    "documentation_style": [
      "JSDoc para funções e interfaces",
      "JSDoc para tipagem e documentação inline",
      "JSDoc para documentação de interfaces e métodos",
      "JSDoc para funções e constantes exportadas"
    ],
    "type_checking": [
      "Strict TypeScript com todas verificações ativadas",
      "TypeScript com type checking ativado via parserOptions.project",
      "NoImplicitAny ativado",
      "exactOptionalPropertyTypes",
      "strict mode"
    ]
  },
  "testing_strategy": {
    "test_framework": [
      "Jest 29"
    ],
    "test_structure": [
      "coverage - relatórios de cobertura",
      "Testes localizados em __tests__ próximos ao código",
      "tests/utils - testes unitários para utilitários",
      "Arquivos de teste excluídos do build (ex: *.test.ts, *.spec.ts)",
      "tests/config/ para testes de configuração"
    ],
    "coverage_requirements": [
      "Cobertura mínima de 80%",
      ">= 90% cobertura para configuração"
    ],
    "test_patterns": [
      "Given-When-Then",
      "Testes unitários e de integração",
      "AAA (Arrange-Act-assert)"
    ],
    "mocking_approach": [
      "Mocks para DOM e elementos HTML",
      "Mocks para DOM e atributos",
      "mock de DOM e funções auxiliares",
      "Mocks para simular atualizações e leitura de configuração"
    ]
  },
  "development_workflow": {
    "branch_strategy": [
      "GitHub Flow",
      "git Flow"
    ],
    "commit_conventions": [
      "Conventional Commits"
    ],
    "pr_requirements": [
      "Revisão obrigatória",
      "Checks automáticos via CI",
      "Checks de lint e testes",
      "Revisão obrigatória e testes aprovados",
      "Testes automatizados passando"
    ],
    "ci_cd_pipeline": [
      "Build",
      "Lint",
      "test",
      "Deploy",
      "Build, lint, test e deploy automatizados",
      "Deploy automático"
    ]
  },
  "commands": {
    "setup": [
      "npm install",
      "npm install prettier --save-dev"
    ],
    "install": [
      "npm install",
      "yarn install",
      "pnpm install"
    ],
    "dev": [
      "npm run dev",
      "tsc --watch"
    ],
    "test": [
      "npm test"
    ],
    "build": [
      "npm run build",
      "tsc"
    ],
    "lint": [
      "npm run lint",
      "npx prettier --check .",
      "eslint . --ext .ts,.tsx"
    ],
    "format": [
      "npm run format",
      "npx prettier --write .",
      "prettier --write ."
    ]
  },
  "security_constraints": {
    "authentication_method": [],
    "authorization_rules": [],
    "sensitive_data": [
      ".env files",
      "Não manipula dados sensíveis"
    ],
    "security_headers": [],
    "encryption_requirements": []
  },
  "performance_requirements": {
    "response_time_limits": [
      "Timeout padrão 10000ms para espera de elementos",
      "Timeout configurável, padrão 10 segundos",
      "Busca deve ser eficiente para DOMs de tamanho médio"
    ],
    "optimization_priorities": [
      "Reduzir tamanho do repositório e melhorar performance do git",
      "Velocidade de formatação otimizada para uso em editores e CI",
      "Equilíbrio entre velocidade de busca e flexibilidade com regex",
      "Build rápido e eficiente via esbuild",
      "Performance na manipulação DOM",
      "Bundle size otimizado via esbuild",
      "Equilíbrio entre velocidade e uso de recursos via cache e polling",
      "Minimizar latência na detecção do elemento",
      "Evitar uso excessivo de CPU pelo polling",
      "Qualidade e segurança do código priorizadas sobre velocidade de build",
      "Baixa complexidade, foco em precisão e manutenção",
      "Busca eficiente com cache opcional"
    ],
    "caching_strategy": [
      "Ignorar caches locais para evitar versionamento",
      "Cache opcional com TTL configurável (default 5000ms)",
      "Cache habilitável via useCache boolean"
    ],
    "scalability_considerations": [
      "Evitar crescimento desnecessário do repositório",
      "Escalável para grandes bases de código",
      "Suporte a buscas em grandes árvores DOM com hierarquias complexas",
      "Suporte multiplataforma via optionalDependencies",
      "Compatibilidade com Node.js >=24 para melhor performance",
      "Pode degradar em DOMs muito grandes",
      "Separação clara entre código fonte e build para facilitar escalabilidade",
      "Uso preferencial de MutationObserver para eficiência em grandes DOMs"
    ]
  },
  "error_handling": {
    "error_format": [
      "Erro lançado em caso de timeout na espera de elementos",
      "Logs no console para regex inválido",
      "Erro padrão com mensagem 'Timeout waiting for element'",
      "Classes de erro com propriedades message, code e details",
      "Mensagens descritivas e contextualizadas",
      "array de strings para erros e avisos"
    ],
    "logging_strategy": [
      "Logs gerados pelo Prettier em caso de falhas",
      "Console.error para erros de regex",
      "Logs no console para tentativas e timeout",
      "Ignorar arquivos de log para evitar poluição do repositório",
      "Níveis silent, info e debug controlam saída de logs"
    ],
    "monitoring_tools": [],
    "error_recovery": [
      "Correção automática via comando de formatação",
      "Tratamento de erros via try/catch em operações assíncronas",
      "Continua busca ignorando regex inválido",
      "Ignora elementos com regex inválida, continua processamento",
      "Rejeição da promise para permitir tratamento externo",
      "Reset da configuração para padrão disponível"
    ]
  },
  "dependencies_context": {
    "critical_dependencies": [
      "Node.js 24+",
      "TypeScript 5.6+",
      "Prettier",
      "ES Modules",
      "@typescript-eslint/eslint-plugin",
      "@typescript-eslint/parser",
      "eslint-config-prettier",
      "eslint-plugin-prettier",
      "typescript",
      "eslint",
      "esbuild",
      "dts-bundle-generator",
      "./types para definição de tipos",
      "findElementByHierarchy",
      "TypeScript Compiler",
      "Error (built-in)"
    ],
    "deprecated_packages": [
      "Bower"
    ],
    "version_constraints": [
      "package-lock.json e yarn.lock para controle de versões",
      "Node.js >= 24.0.0",
      "TypeScript >= 5.6.0",
      "ecmaVersion: 2024",
      "TypeScript parser com tsconfig.json",
      "TypeScript >=5.6 <5.9",
      "ESLint >=9.0.0",
      "typescript ^5.6.0",
      "eslint ^9.0.0",
      "TypeScript >=4.0",
      "target ES6",
      "module ESNext"
    ],
    "internal_packages": [
      "./types",
      "./findElementByHierarchy",
      "config/dom-finder",
      "src/types",
      "src/selectors"
    ]
  },
  "current_challenges": {
    "technical_debt": [
      "Manter .gitignore atualizado para evitar inclusão indevida de arquivos",
      "Manter alinhamento com regras de linting e outras ferramentas",
      "Ausência de testes automatizados",
      "Ausência de caching para buscas repetidas",
      "Polling pode ser substituído por MutationObserver para maior eficiência",
      "Validação de updates poderia ser mais robusta",
      "Seletores podem quebrar com mudanças no DOM ou atributos",
      "Dependência de nomes de classes CSS pode causar fragilidade",
      "Filtro de textareas readonly deve ser implementado externamente, o que pode gerar inconsistências"
    ],
    "known_issues": [
      "Possível exclusão acidental de arquivos importantes se regras forem mal configuradas",
      "Possíveis conflitos com ESLint se regras não estiverem sincronizadas",
      "Performance em DOMs muito grandes",
      "Regex inválido interrompe busca naquele nível",
      "Possível alto consumo de CPU em polling intenso",
      "Concorrência em atualizações não tratada explicitamente",
      "findElementByHierarchy não suporta isAbsent, exigindo filtragem manual",
      "Fragilidade caso classes CSS do Monaco Editor mudem"
    ],
    "performance_bottlenecks": [
      "Repositórios grandes podem sofrer lentidão sem .gitignore adequado",
      "Possível lentidão em buscas com regex complexas e hierarquias profundas",
      "Potencial impacto na manipulação intensiva do DOM",
      "Busca exaustiva em getElementsByTagName",
      "Múltiplas chamadas getElementsByTagName em loops aninhados",
      "Polling a cada 10ms pode impactar performance em dispositivos limitados",
      "Possível lentidão no build devido a verificações estritas",
      "Polling pode impactar performance se mal configurado"
    ],
    "migration_status": [
      "Configuração atualizada para Prettier 2.x+",
      "Estável, sem migrações em andamento"
    ]
  },
  "team_preferences": {
    "code_review_focus": [
      "Verificar regras do .gitignore para evitar inclusão de arquivos desnecessários",
      "Consistência de estilo e aderência às regras de formatação",
      "Consistência de tipagem",
      "Cobertura de testes",
      "Qualidade do código e documentação",
      "Conformidade com regras ESLint",
      "Uso correto de tipos TypeScript",
      "Formatação consistente",
      "Clareza na lógica de filtragem",
      "Tratamento de erros",
      "Performance",
      "Clareza na configuração declarativa",
      "Tratamento correto de timers",
      "Clareza na tipagem e documentação",
      "Verificação de tipos estritos",
      "Ausência de código morto",
      "Consistência de nomenclatura",
      "Consistência de estado Singleton",
      "Clareza e especificidade das mensagens de erro",
      "Consistência dos códigos de erro",
      "Preservação do stack trace",
      "Clareza e precisão dos seletores",
      "Consistência na documentação",
      "Precisão dos seletores e aderência a padrões de nomenclatura",
      "Consistência de tipos",
      "Modularidade",
      "Consistência de exportações",
      "Manutenção da tipagem correta",
      "Documentação JSDoc",
      "Cobertura de validação"
    ],
    "documentation_requirements": [
      "Documentar padrões de arquivos ignorados",
      "Documentação mínima para configuração Prettier",
      "Documentação clara via JSDoc para APIs públicas",
      "Documentação inline via JSDoc",
      "Documentação clara de parâmetros e retorno",
      "Documentação clara para tipos e estrutura de dados",
      "Documentar parâmetros e comportamento assíncrono",
      "JSDoc detalhado para interfaces e métodos públicos",
      "Uso de JSDoc para todas as classes e métodos públicos",
      "Uso de JSDoc para todas as exportações",
      "JSDoc detalhado para cada seletor",
      "Uso de JSDoc para todos os seletores",
      "Uso de JSDoc para documentação de módulos e funções",
      "Documentação inline com JSDoc para cada seletor",
      "JSDoc para todas as interfaces e propriedades"
    ],
    "communication_style": [
      "Comentários claros sobre regras específicas no .gitignore",
      "Comentários claros e objetivos sobre regras de formatação",
      "Comentários objetivos e claros",
      "Uso de PRs para discussões",
      "Comentários objetivos e técnicos",
      "Comentários objetivos e em português",
      "Comentários técnicos em português com termos técnicos em inglês",
      "Comentários claros em português com termos técnicos em inglês"
    ],
    "decision_log": [
      "Decisão de ignorar node_modules, builds e arquivos temporários para manter repositório limpo",
      "Adoção do Prettier para padronização de código",
      "Adoção de Node.js 24+ para suporte nativo a TypeScript e ESM",
      "Adoção de ESLint com plugins TypeScript e Prettier para padronização",
      "Uso de esbuild para bundling",
      "Node.js >=24 como engine mínima",
      "Uso de regex para flexibilidade",
      "Retorno do primeiro elemento válido",
      "Uso de polling para compatibilidade ampla",
      "Adoção de strict mode para garantir qualidade e segurança do código",
      "Uso de Singleton para configuração global",
      "Preferência por MutationObserver para eficiência",
      "Adoção de classes customizadas para erros DOM para melhor tratamento e integração",
      "Separação entre seletores gerais e filtrados para facilitar manutenção",
      "Adoção do padrão Barrel export para organização de seletores",
      "Separação clara entre metadados, validação e busca"
    ]
  },
  "api_specifications": {
    "api_style": [
      "Funções utilitárias para manipulação DOM, não expõe api REST",
      "Função utilitária exportada como módulo ES"
    ],
    "versioning_strategy": [
      "Sem versionamento explícito de api"
    ],
    "response_formats": [
      "Retorno de HTMLElement ou arrays, ou promise para espera assíncrona",
      "HTMLElement | null",
      "array de HTMLElements"
    ],
    "rate_limiting": []
  },
  "deployment_context": {
    "environments": [
      "development",
      "staging",
      "production",
      "Desenvolvimento local",
      "Produção via npm package",
      "Produção em navegador"
    ],
    "deployment_method": [
      "Distribuição via npm",
      "Execução em Node.js 24+ ou browsers compatíveis",
      "npm scripts para build e deploy",
      "Distribuído como parte de pacote npm",
      "Deploy via bundlers front-end (Webpack, Vite)",
      "CI/CD pipelines",
      "Docker e CI/CD via GitHub Actions"
    ],
    "environment_variables": [
      "LIMIT_TIME (timeout configurável)",
      ".env files"
    ],
    "infrastructure_constraints": [
      "Necessita ambiente com DOM disponível (browser ou simulado)",
      "Requer Node.js >=24",
      "Execução em ambiente browser com DOM disponível"
    ]
  },
  "lastCommitHash": "c3d5b7295dc2340a3d726cc89eb9dcf3256dfd1f"
}
