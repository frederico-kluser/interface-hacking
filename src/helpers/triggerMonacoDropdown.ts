import findElementByHierarchy from '../core/findElementByHierarchy.js';
import findElementsByHierarchy from '../core/findElementsByHierarchy.js';
import monacoDropdownButtonSelector from '../selectors/monaco-dropdown-button.js';
import monacoDropdownSelector from '../selectors/monaco-dropdown.js';
import { wait } from './wait.js';

/**
 * Tipos de dropdown dispon√≠veis no Copilot
 */
type DropdownType = 'agent' | 'model' | 'any';

/**
 * Interface para o resultado da busca de dropdowns
 */
export interface DropdownElement {
  /** Container do dropdown */
  container: HTMLElement;
  /** Bot√£o click√°vel do dropdown */
  button: HTMLElement;
  /** Tipo identificado do dropdown */
  type: DropdownType;
  /** Label atual do dropdown */
  label: string;
}

/**
 * M√©todo avan√ßado de acionamento com t√©cnicas adicionais baseadas na pesquisa
 * @param targetDropdown - Elemento dropdown a ser acionado
 * @returns Promise<boolean> - True se conseguiu abrir
 */
const tryAdvancedTriggerMethods = async (targetDropdown: DropdownElement): Promise<boolean> => {
  // eslint-disable-next-line no-console
  console.log('üöÄ Tentando m√©todos avan√ßados...');

  try {
    // M√©todo 4: Programmatic aria-expanded (baseado na pesquisa web)
    // eslint-disable-next-line no-console
    console.log('üîÑ Tentando m√©todo aria-expanded program√°tico...');

    targetDropdown.button.setAttribute('aria-expanded', 'true');
    await wait(100);

    // Dispara evento customizado para notificar mudan√ßa
    const changeEvent = new CustomEvent('change', { bubbles: true });
    targetDropdown.button.dispatchEvent(changeEvent);
    await wait(150);

    if (targetDropdown.button.getAttribute('aria-expanded') === 'true') {
      // eslint-disable-next-line no-console
      console.log('‚úÖ Dropdown aberto via m√©todo aria-expanded');
      return true;
    }

    // M√©todo 5: Composite events (mouse + keyboard simultaneamente)
    // eslint-disable-next-line no-console
    console.log('üîÑ Tentando eventos compostos...');

    // Simula hover primeiro
    const mouseEnterEvent = new MouseEvent('mouseenter', {
      bubbles: true,
      cancelable: true,
      view: window,
    });

    targetDropdown.button.dispatchEvent(mouseEnterEvent);
    await wait(50);

    // Focus + click + keydown combination
    targetDropdown.button.focus();
    await wait(50);

    const compositeClick = new MouseEvent('click', {
      bubbles: true,
      cancelable: true,
      view: window,
      detail: 1, // single click
    });

    targetDropdown.button.dispatchEvent(compositeClick);

    const compositeKeydown = new KeyboardEvent('keydown', {
      key: 'Enter',
      code: 'Enter',
      bubbles: true,
      cancelable: true,
    });

    targetDropdown.button.dispatchEvent(compositeKeydown);
    await wait(200);

    if (targetDropdown.button.getAttribute('aria-expanded') === 'true') {
      // eslint-disable-next-line no-console
      console.log('‚úÖ Dropdown aberto via eventos compostos');
      return true;
    }

    // M√©todo 6: Trigger parent events (caso o dropdown tenha event delegation)
    // eslint-disable-next-line no-console
    console.log('üîÑ Tentando acionamento via container pai...');

    const parentClick = new MouseEvent('click', {
      bubbles: true,
      cancelable: true,
      view: window,
    });

    targetDropdown.container.dispatchEvent(parentClick);
    await wait(150);

    if (targetDropdown.button.getAttribute('aria-expanded') === 'true') {
      // eslint-disable-next-line no-console
      console.log('‚úÖ Dropdown aberto via container pai');
      return true;
    }

    return false;
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error('‚ùå Erro nos m√©todos avan√ßados:', error);
    return false;
  }
};

/**
 * Encontra todos os dropdowns do Monaco na toolbar
 * @returns {DropdownElement[]} Array com todos os dropdowns encontrados
 */
export const findMonacoDropdowns = (): DropdownElement[] => {
  // eslint-disable-next-line no-console
  console.log('üîç Buscando dropdowns do Monaco...');

  const foundDropdowns: DropdownElement[] = [];

  // M√©todo 1: Busca espec√≠fica por dropdowns do Copilot
  try {
    const copilotButtons = Array.from(
      document.querySelectorAll('a[role="button"][aria-haspopup="true"]'),
    );

    for (const button of copilotButtons) {
      const ariaLabel = button.getAttribute('aria-label') || '';
      const textContent = button.textContent?.trim() || '';

      // Filtra apenas dropdowns do Copilot (Agent e Model)
      if (ariaLabel.includes('Set Mode') || ariaLabel.includes('Pick Model')) {
        let type: DropdownType = 'any';
        let label = textContent;

        if (ariaLabel.includes('Set Mode') || ariaLabel.includes('Agent')) {
          type = 'agent';
          label = textContent || 'Agent';
        } else if (ariaLabel.includes('Pick Model') || ariaLabel.includes('Model')) {
          type = 'model';
          label = textContent || 'Model';
        }

        // Encontra o container pai (dropdown)
        const container =
          button.closest('.monaco-dropdown') ||
          button.closest('.dropdown-label')?.parentElement ||
          button.parentElement;

        if (container) {
          foundDropdowns.push({
            container: container as HTMLElement,
            button: button as HTMLElement,
            type,
            label,
          });

          // eslint-disable-next-line no-console
          console.log(
            `‚úÖ Copilot dropdown encontrado - Tipo: ${type}, Label: "${label}", Aria: "${ariaLabel}"`,
          );
        }
      }
    }
  } catch (error) {
    // eslint-disable-next-line no-console
    console.warn('‚ö†Ô∏è Erro na busca espec√≠fica por dropdowns Copilot:', error);
  }

  // M√©todo 2: Fallback usando seletores originais se n√£o encontrou nada
  if (foundDropdowns.length === 0) {
    // eslint-disable-next-line no-console
    console.log('üîÑ Usando m√©todo fallback...');

    const dropdowns = findElementsByHierarchy(monacoDropdownSelector, document.body);

    for (const dropdown of dropdowns) {
      const button = findElementByHierarchy(monacoDropdownButtonSelector, dropdown);

      if (button) {
        // Identifica o tipo do dropdown baseado no aria-label
        const ariaLabel = button.getAttribute('aria-label') || '';

        let type: DropdownType = 'any';
        if (ariaLabel.includes('Agent') || ariaLabel.includes('Mode')) {
          type = 'agent';
        } else if (ariaLabel.includes('Model') || ariaLabel.includes('Pick Model')) {
          type = 'model';
        }

        // Extrai o label atual
        const labelElement = button.querySelector('.chat-model-label');
        const label = labelElement?.textContent?.trim() || button.textContent?.trim() || 'Unknown';

        foundDropdowns.push({
          container: dropdown,
          button,
          type,
          label,
        });

        // eslint-disable-next-line no-console
        console.log(`‚úÖ Dropdown encontrado (fallback) - Tipo: ${type}, Label: "${label}"`);
      }
    }
  }

  // eslint-disable-next-line no-console
  console.log(`üîç Total de dropdowns encontrados: ${foundDropdowns.length}`);
  return foundDropdowns;
};

/**
 * Aciona um dropdown espec√≠fico do Monaco Editor com m√∫ltiplos m√©todos de fallback
 * @param {DropdownType} type - Tipo do dropdown a ser acionado ('agent', 'model', 'any')
 * @returns {Promise<boolean>} True se o dropdown foi acionado com sucesso
 */
export const triggerMonacoDropdown = async (type: DropdownType = 'any'): Promise<boolean> => {
  // eslint-disable-next-line no-console
  console.log(`üéØ Acionando dropdown do tipo: "${type}"`);

  try {
    const dropdowns = findMonacoDropdowns();

    if (dropdowns.length === 0) {
      // eslint-disable-next-line no-console
      console.error('‚ùå Nenhum dropdown encontrado na toolbar');
      return false;
    }

    // Encontra o dropdown do tipo especificado
    let targetDropdown: DropdownElement | undefined;

    if (type === 'any') {
      targetDropdown = dropdowns[0]; // Pega o primeiro dispon√≠vel
    } else {
      targetDropdown = dropdowns.find((d) => d.type === type);
    }

    if (!targetDropdown) {
      // eslint-disable-next-line no-console
      console.error(`‚ùå Dropdown do tipo "${type}" n√£o encontrado`);
      // eslint-disable-next-line no-console
      console.log(
        'Dropdowns dispon√≠veis:',
        dropdowns.map((d) => `${d.type} (${d.label})`),
      );
      return false;
    }

    // eslint-disable-next-line no-console
    console.log(`üéØ Acionando dropdown: ${targetDropdown.type} - "${targetDropdown.label}"`);

    // Verifica√ß√£o simples se j√° est√° aberto
    const isExpanded = targetDropdown.button.getAttribute('aria-expanded') === 'true';
    if (isExpanded) {
      // eslint-disable-next-line no-console
      console.log('‚ö†Ô∏è Dropdown j√° est√° aberto');
      return true;
    }

    // M√âTODO 1: Click direto simples (que funcionava antes)
    // eslint-disable-next-line no-console
    console.log('üîÑ Tentando click direto...');

    targetDropdown.button.focus();
    await wait(100);
    targetDropdown.button.click();
    await wait(200);

    // Verifica se abriu
    let newState = targetDropdown.button.getAttribute('aria-expanded');
    if (newState === 'true') {
      // eslint-disable-next-line no-console
      console.log('‚úÖ Dropdown aberto com sucesso via click direto');
      return true;
    }

    // M√âTODO 2: Mouse events (que tamb√©m funcionava)
    // eslint-disable-next-line no-console
    console.log('üîÑ Tentando com eventos de mouse...');

    const mouseDownEvent = new MouseEvent('mousedown', {
      bubbles: true,
      cancelable: true,
      view: window,
    });

    const clickEvent = new MouseEvent('click', {
      bubbles: true,
      cancelable: true,
      view: window,
    });

    const mouseUpEvent = new MouseEvent('mouseup', {
      bubbles: true,
      cancelable: true,
      view: window,
    });

    targetDropdown.button.dispatchEvent(mouseDownEvent);
    await wait(50);
    targetDropdown.button.dispatchEvent(clickEvent);
    await wait(50);
    targetDropdown.button.dispatchEvent(mouseUpEvent);
    await wait(200);

    // Verifica novamente
    newState = targetDropdown.button.getAttribute('aria-expanded');
    if (newState === 'true') {
      // eslint-disable-next-line no-console
      console.log('‚úÖ Dropdown aberto com sucesso via eventos de mouse');
      return true;
    }

    // M√âTODO 3: Keyboard Enter
    // eslint-disable-next-line no-console
    console.log('üîÑ Tentando com Enter...');

    targetDropdown.button.focus();
    await wait(100);

    const enterEvent = new KeyboardEvent('keydown', {
      key: 'Enter',
      code: 'Enter',
      bubbles: true,
      cancelable: true,
    });

    targetDropdown.button.dispatchEvent(enterEvent);
    await wait(200);

    newState = targetDropdown.button.getAttribute('aria-expanded');
    if (newState === 'true') {
      // eslint-disable-next-line no-console
      console.log('‚úÖ Dropdown aberto com sucesso via Enter');
      return true;
    }

    // M√âTODO 4: M√©todos avan√ßados como √∫ltimo recurso
    // eslint-disable-next-line no-console
    console.log('üîÑ Tentando m√©todos avan√ßados...');

    const advancedSuccess = await tryAdvancedTriggerMethods(targetDropdown);
    if (advancedSuccess) {
      return true;
    }

    // eslint-disable-next-line no-console
    console.error('‚ùå Todos os m√©todos falharam para abrir o dropdown');
    return false;
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error('‚ùå Erro ao acionar dropdown:', error);
    return false;
  }
};

/**
 * Fecha um dropdown espec√≠fico se estiver aberto
 * @param {DropdownType} type - Tipo do dropdown a ser fechado ('agent', 'model', 'any')
 * @returns {Promise<boolean>} True se o dropdown foi fechado com sucesso
 */
export const closeMonacoDropdown = async (type: DropdownType = 'any'): Promise<boolean> => {
  // eslint-disable-next-line no-console
  console.log(`üîí Fechando dropdown do tipo: "${type}"`);

  try {
    const dropdowns = findMonacoDropdowns();

    if (dropdowns.length === 0) {
      // eslint-disable-next-line no-console
      console.log('‚ÑπÔ∏è Nenhum dropdown encontrado');
      return false;
    }

    // Encontra o dropdown do tipo especificado
    let targetDropdown: DropdownElement | undefined;

    if (type === 'any') {
      // Encontra qualquer dropdown que esteja aberto
      targetDropdown = dropdowns.find((d) => d.button.getAttribute('aria-expanded') === 'true');
    } else {
      targetDropdown = dropdowns.find((d) => d.type === type);
    }

    if (!targetDropdown) {
      // eslint-disable-next-line no-console
      console.log(`‚ÑπÔ∏è Dropdown do tipo "${type}" n√£o encontrado ou j√° fechado`);
      return false;
    }

    // Verifica se realmente est√° aberto
    const isExpanded = targetDropdown.button.getAttribute('aria-expanded') === 'true';
    if (!isExpanded) {
      // eslint-disable-next-line no-console
      console.log('‚ÑπÔ∏è Dropdown j√° est√° fechado');
      return true;
    }

    // eslint-disable-next-line no-console
    console.log(`üîí Fechando dropdown: ${targetDropdown.type} - "${targetDropdown.label}"`);

    // M√©todo 1: Escape key para fechar
    const escapeEvent = new KeyboardEvent('keydown', {
      key: 'Escape',
      code: 'Escape',
      bubbles: true,
      cancelable: true,
    });

    targetDropdown.button.dispatchEvent(escapeEvent);
    await wait(200);

    // Verifica se fechou
    let newState = targetDropdown.button.getAttribute('aria-expanded');
    if (newState === 'false' || newState === null) {
      // eslint-disable-next-line no-console
      console.log('‚úÖ Dropdown fechado com sucesso via Escape');
      return true;
    }

    // M√©todo 2: Click novamente para toggle
    targetDropdown.button.click();
    await wait(200);

    newState = targetDropdown.button.getAttribute('aria-expanded');
    if (newState === 'false' || newState === null) {
      // eslint-disable-next-line no-console
      console.log('‚úÖ Dropdown fechado com sucesso via click toggle');
      return true;
    }

    // M√©todo 3: Click fora do dropdown
    const body = document.body;
    const outsideClick = new MouseEvent('click', {
      bubbles: true,
      cancelable: true,
      view: window,
    });

    body.dispatchEvent(outsideClick);
    await wait(200);

    newState = targetDropdown.button.getAttribute('aria-expanded');
    if (newState === 'false' || newState === null) {
      // eslint-disable-next-line no-console
      console.log('‚úÖ Dropdown fechado com sucesso via click externo');
      return true;
    }

    // eslint-disable-next-line no-console
    console.warn('‚ö†Ô∏è N√£o foi poss√≠vel fechar o dropdown');
    return false;
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error('‚ùå Erro ao fechar dropdown:', error);
    return false;
  }
};

/**
 * Lista todos os dropdowns dispon√≠veis e suas op√ß√µes
 * @returns {DropdownElement[]} Array com informa√ß√µes dos dropdowns
 */
export const listMonacoDropdowns = (): DropdownElement[] => {
  // eslint-disable-next-line no-console
  console.log('üìã Listando dropdowns dispon√≠veis...');

  const dropdowns = findMonacoDropdowns();

  if (dropdowns.length === 0) {
    // eslint-disable-next-line no-console
    console.log('‚ÑπÔ∏è Nenhum dropdown encontrado');
    return [];
  }

  // eslint-disable-next-line no-console
  console.log('üìã Dropdowns dispon√≠veis:');
  dropdowns.forEach((dropdown, index) => {
    const status =
      dropdown.button.getAttribute('aria-expanded') === 'true' ? 'üîΩ Aberto' : '‚ñ∂Ô∏è Fechado';
    // eslint-disable-next-line no-console
    console.log(
      `  ${index + 1}. Tipo: ${dropdown.type} | Label: "${dropdown.label}" | Status: ${status}`,
    );
  });

  return dropdowns;
};

/**
 * Captura o HTML das op√ß√µes quando um dropdown √© aberto
 * @param {DropdownType} type - Tipo do dropdown a ser analisado
 * @returns {Promise<boolean>} True se conseguiu capturar as op√ß√µes
 */
export const captureDropdownOptions = async (type: DropdownType = 'any'): Promise<boolean> => {
  // eslint-disable-next-line no-console
  console.log(`üîç CAPTURANDO op√ß√µes do dropdown "${type}"...`);

  try {
    const dropdowns = findMonacoDropdowns();

    if (dropdowns.length === 0) {
      // eslint-disable-next-line no-console
      console.error('‚ùå Nenhum dropdown encontrado');
      return false;
    }

    let targetDropdown: DropdownElement | undefined;

    if (type === 'any') {
      targetDropdown = dropdowns[0];
    } else {
      targetDropdown = dropdowns.find((d) => d.type === type);
    }

    if (!targetDropdown) {
      // eslint-disable-next-line no-console
      console.error(`‚ùå Dropdown do tipo "${type}" n√£o encontrado`);
      return false;
    }

    // eslint-disable-next-line no-console
    console.log(`üéØ Capturando op√ß√µes: ${targetDropdown.type} - "${targetDropdown.label}"`);

    // Captura o estado inicial do DOM (antes de abrir)
    const beforeMenus = Array.from(
      document.querySelectorAll(
        '[class*="menu"], [class*="dropdown"], [class*="option"], [class*="item"]',
      ),
    );

    // eslint-disable-next-line no-console
    console.log(`üìä Estado inicial: ${beforeMenus.length} elementos de menu/op√ß√£o no DOM`);

    // Abre o dropdown com m√©todo mais r√°pido
    targetDropdown.button.focus();
    targetDropdown.button.click();

    // CAPTURA IMEDIATA (sem wait - m√°xima velocidade)
    // Espera apenas 50ms para o DOM ser atualizado
    await wait(50);

    // Captura TODOS os menus/dropdowns/op√ß√µes que apareceram
    const allMenuSelectors = [
      '.monaco-dropdown-menu',
      '.dropdown-menu',
      '[class*="dropdown-menu"]',
      '[class*="menu"]',
      '[class*="option"]',
      '[class*="item"]',
      '[class*="picker"]',
      '[role="menu"]',
      '[role="listbox"]',
      '[role="option"]',
      '.monaco-menu',
      '.context-menu',
      '.monaco-list',
      '.monaco-tree',
    ];

    const afterMenus: HTMLElement[] = [];
    const newMenus: HTMLElement[] = [];

    allMenuSelectors.forEach((selector) => {
      try {
        const elements = document.querySelectorAll(selector);
        elements.forEach((el) => {
          if (el instanceof HTMLElement) {
            afterMenus.push(el);

            // Verifica se √© um elemento novo (n√£o estava na captura inicial)
            if (!beforeMenus.includes(el)) {
              newMenus.push(el);
            }
          }
        });
      } catch {
        // Ignora seletores inv√°lidos
      }
    });

    // eslint-disable-next-line no-console
    console.log(
      `üìä Ap√≥s abrir: ${afterMenus.length} elementos de menu total, ${newMenus.length} novos`,
    );

    // Loga TODOS os menus vis√≠veis (novos e existentes)
    const visibleMenus = afterMenus.filter((menu) => {
      const isVisible =
        menu.style.display !== 'none' &&
        !menu.hasAttribute('hidden') &&
        menu.offsetParent !== null &&
        menu.getBoundingClientRect().width > 0 &&
        menu.getBoundingClientRect().height > 0;
      return isVisible;
    });

    // eslint-disable-next-line no-console
    console.log(`üîç Menus VIS√çVEIS encontrados: ${visibleMenus.length}`);

    // LOGA TODO O HTML CAPTURADO para an√°lise
    if (visibleMenus.length > 0) {
      // eslint-disable-next-line no-console
      console.log('üéØ ========== HTML DOS MENUS VIS√çVEIS ==========');

      visibleMenus.forEach((menu, index) => {
        // eslint-disable-next-line no-console
        console.log(`\nüìã MENU ${index + 1}:`);
        // eslint-disable-next-line no-console
        console.log(`Classes: ${menu.className}`);
        // eslint-disable-next-line no-console
        console.log(`ID: ${menu.id}`);
        // eslint-disable-next-line no-console
        console.log(`Posi√ß√£o: top=${menu.style.top}, left=${menu.style.left}`);
        // eslint-disable-next-line no-console
        console.log(
          `Tamanho: ${menu.getBoundingClientRect().width}x${menu.getBoundingClientRect().height}`,
        );
        // eslint-disable-next-line no-console
        console.log('HTML COMPLETO:');
        // eslint-disable-next-line no-console
        console.log(menu.outerHTML);

        // Busca op√ß√µes dentro do menu
        const options = menu.querySelectorAll(
          '[role="option"], .option, [class*="option"], [class*="item"], li, .monaco-list-row',
        );
        // eslint-disable-next-line no-console
        console.log(`\nüéØ OP√á√ïES DENTRO DESTE MENU (${options.length}):`);

        options.forEach((option, optIndex) => {
          if (option instanceof HTMLElement) {
            // eslint-disable-next-line no-console
            console.log(
              `  ${optIndex + 1}. "${option.textContent?.trim()}" | Classes: ${option.className} | HTML: ${option.outerHTML}`,
            );
          }
        });
      });

      // eslint-disable-next-line no-console
      console.log('\nüéØ ========== FIM DOS MENUS ==========');
    } else {
      // Se n√£o encontrou menus vis√≠veis, loga TODOS os novos elementos
      // eslint-disable-next-line no-console
      console.log('‚ö†Ô∏è Nenhum menu vis√≠vel encontrado. Logando TODOS os elementos novos:');

      newMenus.forEach((menu, index) => {
        // eslint-disable-next-line no-console
        console.log(`\nüìã ELEMENTO NOVO ${index + 1}:`);
        // eslint-disable-next-line no-console
        console.log(`Classes: ${menu.className}`);
        // eslint-disable-next-line no-console
        console.log(`Vis√≠vel: ${menu.offsetParent !== null}`);
        // eslint-disable-next-line no-console
        console.log(`HTML: ${menu.outerHTML}`);
      });
    }

    // Tamb√©m captura mudan√ßas no dropdown button
    const buttonState = targetDropdown.button.getAttribute('aria-expanded');
    // eslint-disable-next-line no-console
    console.log(`\nüîò Estado do bot√£o ap√≥s abertura: aria-expanded="${buttonState}"`);
    // eslint-disable-next-line no-console
    console.log(`üîò HTML do bot√£o: ${targetDropdown.button.outerHTML}`);

    // Espera um pouco mais para ver se algo muda
    await wait(100);

    const finalButtonState = targetDropdown.button.getAttribute('aria-expanded');
    // eslint-disable-next-line no-console
    console.log(`üîò Estado final do bot√£o: aria-expanded="${finalButtonState}"`);

    return true;
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error('‚ùå Erro ao capturar op√ß√µes:', error);
    return false;
  }
};

/**
 * Captura R√ÅPIDA e espec√≠fica dos dropdowns do Copilot com m√∫ltiplas tentativas
 * @param {DropdownType} type - Tipo do dropdown a ser analisado
 * @returns {Promise<boolean>} True se conseguiu capturar as op√ß√µes
 */
export const captureDropdownOptionsFast = async (type: DropdownType = 'any'): Promise<boolean> => {
  // eslint-disable-next-line no-console
  console.log(`üöÄ CAPTURA R√ÅPIDA - dropdown "${type}"...`);

  try {
    const dropdowns = findMonacoDropdowns();

    if (dropdowns.length === 0) {
      // eslint-disable-next-line no-console
      console.error('‚ùå Nenhum dropdown encontrado');
      return false;
    }

    let targetDropdown: DropdownElement | undefined;

    if (type === 'any') {
      targetDropdown = dropdowns[0];
    } else {
      targetDropdown = dropdowns.find((d) => d.type === type);
    }

    if (!targetDropdown) {
      // eslint-disable-next-line no-console
      console.error(`‚ùå Dropdown do tipo "${type}" n√£o encontrado`);
      return false;
    }

    // eslint-disable-next-line no-console
    console.log(`üéØ Captura r√°pida: ${targetDropdown.type} - "${targetDropdown.label}"`);

    // Seletores espec√≠ficos para dropdowns do Copilot/Agent/Model
    const copilotMenuSelectors = [
      '.monaco-menu',
      '.dropdown-menu',
      '.codicon-menu',
      '[role="menu"]',
      '[role="listbox"]',
      '.chat-dropdown-menu',
      '.agent-picker',
      '.model-picker',
      '[aria-label*="Agent"]',
      '[aria-label*="Model"]',
      '[aria-label*="Pick"]',
      '.monaco-dropdown-menu',
      '.context-menu',
    ];

    // Fun√ß√£o para capturar estado atual
    const captureMenuState = (label: string): HTMLElement[] => {
      const menus: HTMLElement[] = [];

      copilotMenuSelectors.forEach((selector) => {
        try {
          const elements = document.querySelectorAll(selector);
          elements.forEach((el) => {
            if (el instanceof HTMLElement) {
              const isVisible =
                el.style.display !== 'none' &&
                !el.hasAttribute('hidden') &&
                el.offsetParent !== null &&
                el.getBoundingClientRect().width > 0 &&
                el.getBoundingClientRect().height > 0;

              if (isVisible) {
                menus.push(el);
              }
            }
          });
        } catch {
          // Ignora seletores inv√°lidos
        }
      });

      // eslint-disable-next-line no-console
      console.log(`üìä ${label}: ${menus.length} menus vis√≠veis`);

      return menus;
    };

    // CAPTURA 1: Estado inicial
    const menusBefore = captureMenuState('ANTES');

    // Prepara√ß√£o: foco e posicionamento
    targetDropdown.button.focus();
    targetDropdown.button.scrollIntoView({ behavior: 'instant', block: 'center' });

    // CLIQUE R√ÅPIDO E M√öLTIPLAS CAPTURAS
    // eslint-disable-next-line no-console
    console.log('‚ö° Executando clique e capturas sequenciais...');

    // Click
    targetDropdown.button.click();

    // CAPTURA 2: Imediatamente ap√≥s click (0ms)
    const menus0ms = captureMenuState('0ms ap√≥s click');

    // CAPTURA 3: 25ms ap√≥s click
    setTimeout(() => {
      const menus25ms = captureMenuState('25ms ap√≥s click');
      logMenuDetails(menus25ms, '25ms');
    }, 25);

    // CAPTURA 4: 50ms ap√≥s click
    setTimeout(() => {
      const menus50ms = captureMenuState('50ms ap√≥s click');
      logMenuDetails(menus50ms, '50ms');
    }, 50);

    // CAPTURA 5: 100ms ap√≥s click
    setTimeout(() => {
      const menus100ms = captureMenuState('100ms ap√≥s click');
      logMenuDetails(menus100ms, '100ms');
    }, 100);

    // CAPTURA 6: 200ms ap√≥s click
    setTimeout(() => {
      const menus200ms = captureMenuState('200ms ap√≥s click');
      logMenuDetails(menus200ms, '200ms');

      // Estado final do bot√£o
      const finalState = targetDropdown.button.getAttribute('aria-expanded');
      // eslint-disable-next-line no-console
      console.log(`üîò Estado final (200ms): aria-expanded="${finalState}"`);
    }, 200);

    // Log inicial
    logMenuDetails(menus0ms, '0ms');
    logMenuDetails(menusBefore, 'INICIAL');

    return true;
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error('‚ùå Erro na captura r√°pida:', error);
    return false;
  }
};

/**
 * Helper function para logar detalhes dos menus encontrados
 */
const logMenuDetails = (menus: HTMLElement[], timing: string): void => {
  if (menus.length === 0) {
    // eslint-disable-next-line no-console
    console.log(`üìã ${timing}: Nenhum menu vis√≠vel`);
    return;
  }

  // eslint-disable-next-line no-console
  console.log(`\nüéØ ===== MENUS ENCONTRADOS (${timing}) =====`);

  menus.forEach((menu, index) => {
    // eslint-disable-next-line no-console
    console.log(`\nüìã MENU ${index + 1} (${timing}):`);
    // eslint-disable-next-line no-console
    console.log(`Classes: ${menu.className}`);
    // eslint-disable-next-line no-console
    console.log(`ID: ${menu.id}`);
    // eslint-disable-next-line no-console
    console.log(`TagName: ${menu.tagName}`);
    // eslint-disable-next-line no-console
    console.log(`aria-label: ${menu.getAttribute('aria-label')}`);
    // eslint-disable-next-line no-console
    console.log(`role: ${menu.getAttribute('role')}`);

    const rect = menu.getBoundingClientRect();
    // eslint-disable-next-line no-console
    console.log(`Posi√ß√£o: ${rect.top}px, ${rect.left}px | Tamanho: ${rect.width}x${rect.height}`);

    // Busca por op√ß√µes/items dentro do menu
    const options = menu.querySelectorAll(
      '[role="option"], [role="menuitem"], .option, .menu-item, [class*="option"], [class*="item"], [class*="agent"], [class*="model"]',
    );

    // eslint-disable-next-line no-console
    console.log(`üéØ OP√á√ïES/ITEMS (${options.length}):`);

    if (options.length > 0) {
      options.forEach((option, optIndex) => {
        if (option instanceof HTMLElement) {
          // eslint-disable-next-line no-console
          console.log(
            `  ${optIndex + 1}. "${option.textContent?.trim()}" | Classes: ${option.className}`,
          );
        }
      });
    } else {
      // Se n√£o encontrou op√ß√µes, lista todos os elementos filhos
      const children = Array.from(menu.children);
      // eslint-disable-next-line no-console
      console.log(`üîç ELEMENTOS FILHOS (${children.length}):`);

      children.slice(0, 5).forEach((child, childIndex) => {
        if (child instanceof HTMLElement) {
          // eslint-disable-next-line no-console
          console.log(
            `  ${childIndex + 1}. "${child.textContent?.trim()}" | Tag: ${child.tagName} | Classes: ${child.className}`,
          );
        }
      });
    }

    // HTML compacto (primeiros 200 chars)
    const compactHtml = `${menu.outerHTML.substring(0, 200)}...`;
    // eslint-disable-next-line no-console
    console.log(`HTML (primeiros 200 chars): ${compactHtml}`);
  });

  // eslint-disable-next-line no-console
  console.log(`üéØ ===== FIM MENUS (${timing}) =====\n`);
};

/**
 * Debug: Encontra qualquer dropdown na p√°gina para an√°lise
 * @returns {HTMLElement[]} Array com elementos que podem ser dropdowns
 */
export const debugFindPossibleDropdowns = (): HTMLElement[] => {
  // eslint-disable-next-line no-console
  console.log('üîç DEBUG: Procurando poss√≠veis dropdowns na p√°gina...');

  const possibleDropdowns: HTMLElement[] = [];

  // Busca por elementos com classes relacionadas a dropdown
  const dropdownClasses = [
    '.monaco-dropdown',
    '.dropdown',
    '[class*="dropdown"]',
    '[class*="picker"]',
    '[class*="modelPicker"]',
    '[class*="model-picker"]',
    '[aria-haspopup="true"]',
    '[role="button"][aria-haspopup]',
  ];

  dropdownClasses.forEach((selector) => {
    try {
      const elements = document.querySelectorAll(selector);
      elements.forEach((el) => {
        if (el instanceof HTMLElement && !possibleDropdowns.includes(el)) {
          possibleDropdowns.push(el);
          // eslint-disable-next-line no-console
          console.log(`üìã Encontrado: ${selector}`, el);
          // eslint-disable-next-line no-console
          console.log(`   Classes: ${el.className}`);
          // eslint-disable-next-line no-console
          console.log(`   Texto: ${el.textContent?.trim()}`);
          // eslint-disable-next-line no-console
          console.log(`   Aria-label: ${el.getAttribute('aria-label')}`);
          // eslint-disable-next-line no-console
          console.log(`   Pai: ${el.parentElement?.className}`);
        }
      });
    } catch {
      // Ignora seletores inv√°lidos
    }
  });

  // eslint-disable-next-line no-console
  console.log(`üîç Total de poss√≠veis dropdowns encontrados: ${possibleDropdowns.length}`);
  return possibleDropdowns;
};

/**
 * Interface para elementos encontrados na busca direta
 */
interface DirectDropdownElement {
  container: HTMLElement;
  button: HTMLElement;
  ariaLabel: string;
  textContent: string;
  classes: string;
}

/**
 * Encontra dropdowns usando busca direta por seletores CSS
 * @returns {DirectDropdownElement[]} Array com dropdowns encontrados
 */
export const findDropdownsDirectly = (): DirectDropdownElement[] => {
  // eslint-disable-next-line no-console
  console.log('üîç Busca direta por dropdowns...');

  const foundDropdowns: DirectDropdownElement[] = [];

  // Busca por dropdowns usando seletores CSS diretos
  const dropdownSelectors = [
    '.monaco-dropdown .dropdown-label .action-label',
    '[aria-haspopup="true"][role="button"]',
    '.chat-model-label',
    '[class*="modelPicker"] .action-label',
    '.monaco-toolbar [aria-haspopup="true"]',
  ];

  dropdownSelectors.forEach((selector) => {
    try {
      const buttons = document.querySelectorAll(selector);
      // eslint-disable-next-line no-console
      console.log(`üîç Seletor "${selector}": ${buttons.length} elementos`);

      buttons.forEach((button) => {
        if (button instanceof HTMLElement) {
          const ariaLabel = button.getAttribute('aria-label') || '';
          const textContent = button.textContent?.trim() || '';

          // eslint-disable-next-line no-console
          console.log(`   üìã Bot√£o: "${textContent}" (${ariaLabel})`);

          // Tenta identificar o container do dropdown
          const container =
            button.closest('.monaco-dropdown') ||
            button.closest('[class*="dropdown"]') ||
            button.closest('li') ||
            button.parentElement;

          if (container instanceof HTMLElement) {
            foundDropdowns.push({
              container,
              button,
              ariaLabel,
              textContent,
              classes: button.className,
            });
          }
        }
      });
    } catch (error) {
      // eslint-disable-next-line no-console
      console.log(`‚ùå Erro no seletor ${selector}:`, error);
    }
  });

  return foundDropdowns;
};

/**
 * Debug espec√≠fico para testar os dropdowns encontrados
 * @returns {void}
 */
export const testDropdownTrigger = async (): Promise<void> => {
  // eslint-disable-next-line no-console
  console.log('üß™ TESTE: Executando debug espec√≠fico de trigger...');

  try {
    const dropdowns = findMonacoDropdowns();

    // eslint-disable-next-line no-console
    console.log(`üìä Total de dropdowns encontrados: ${dropdowns.length}`);

    for (let i = 0; i < dropdowns.length; i += 1) {
      const dropdown = dropdowns[i];
      if (!dropdown) {
        // eslint-disable-next-line no-console
        console.log(`\n‚ö†Ô∏è Dropdown ${i + 1} √© undefined, pulando...`);
        continue;
      }

      // eslint-disable-next-line no-console
      console.log(`\nüîç Testando dropdown ${i + 1}:`);
      // eslint-disable-next-line no-console
      console.log(`  Tipo: ${dropdown.type}`);
      // eslint-disable-next-line no-console
      console.log(`  Label: "${dropdown.label}"`);
      // eslint-disable-next-line no-console
      console.log(`  Button aria-label: "${dropdown.button.getAttribute('aria-label')}"`);
      // eslint-disable-next-line no-console
      console.log(`  Button tag: ${dropdown.button.tagName}`);
      // eslint-disable-next-line no-console
      console.log(`  Button classes: ${dropdown.button.className}`);
      // eslint-disable-next-line no-console
      console.log(`  Container classes: ${dropdown.container.className}`);
      // eslint-disable-next-line no-console
      console.log(`  Aria-expanded atual: ${dropdown.button.getAttribute('aria-expanded')}`);

      // Teste de click direto
      // eslint-disable-next-line no-console
      console.log(`  üî¨ Testando click direto...`);
      dropdown.button.click();

      await wait(500); // Tempo maior para debug

      const newState = dropdown.button.getAttribute('aria-expanded');
      // eslint-disable-next-line no-console
      console.log(`  üìä Estado ap√≥s click: ${newState}`);

      // Verifica se h√° menu vis√≠vel
      const menus = document.querySelectorAll(
        '.monaco-dropdown-menu, .dropdown-menu, [class*="dropdown-menu"]',
      );
      // eslint-disable-next-line no-console
      console.log(`  üìã Menus encontrados no DOM: ${menus.length}`);

      for (let j = 0; j < menus.length; j += 1) {
        const menu = menus[j] as HTMLElement;
        const isVisible =
          menu.style.display !== 'none' &&
          !menu.hasAttribute('hidden') &&
          menu.offsetParent !== null;
        // eslint-disable-next-line no-console
        console.log(`    Menu ${j + 1}: ${menu.className} - Vis√≠vel: ${isVisible}`);
      }
    }

    // eslint-disable-next-line no-console
    console.log('üß™ Teste completo!');
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error('‚ùå Erro no teste:', error);
  }
};

/**
 * Diagn√≥stico espec√≠fico para entender por que o dropdown n√£o abre
 * @param {DropdownType} type - Tipo do dropdown a ser diagnosticado
 * @returns {Promise<void>} Logs detalhados para debugging
 */
export const debugDropdownClick = async (type: DropdownType = 'any'): Promise<void> => {
  // eslint-disable-next-line no-console
  console.log(`üî¨ DIAGN√ìSTICO - Por que o dropdown "${type}" n√£o abre?`);

  try {
    const dropdowns = findMonacoDropdowns();

    if (dropdowns.length === 0) {
      // eslint-disable-next-line no-console
      console.error('‚ùå Nenhum dropdown encontrado');
      return;
    }

    let targetDropdown: DropdownElement | undefined;

    if (type === 'any') {
      targetDropdown = dropdowns[0];
    } else {
      targetDropdown = dropdowns.find((d) => d.type === type);
    }

    if (!targetDropdown) {
      // eslint-disable-next-line no-console
      console.error(`‚ùå Dropdown do tipo "${type}" n√£o encontrado`);
      return;
    }

    // eslint-disable-next-line no-console
    console.log(`üéØ Diagnosticando: ${targetDropdown.type} - "${targetDropdown.label}"`);

    const button = targetDropdown.button;

    // 1. AN√ÅLISE DO ELEMENTO
    // eslint-disable-next-line no-console
    console.log('\nüìä AN√ÅLISE DO ELEMENTO:');
    // eslint-disable-next-line no-console
    console.log(`  Tag: ${button.tagName}`);
    // eslint-disable-next-line no-console
    console.log(`  Classes: ${button.className}`);
    // eslint-disable-next-line no-console
    console.log(`  ID: ${button.id}`);
    // eslint-disable-next-line no-console
    console.log(`  Role: ${button.getAttribute('role')}`);
    // eslint-disable-next-line no-console
    console.log(`  Tabindex: ${button.getAttribute('tabindex')}`);
    // eslint-disable-next-line no-console
    console.log(`  Disabled: ${button.hasAttribute('disabled')}`);
    // eslint-disable-next-line no-console
    console.log(`  Hidden: ${button.hasAttribute('hidden')}`);

    // 2. AN√ÅLISE DE VISIBILIDADE
    // eslint-disable-next-line no-console
    console.log('\nüëÅÔ∏è AN√ÅLISE DE VISIBILIDADE:');
    const rect = button.getBoundingClientRect();
    // eslint-disable-next-line no-console
    console.log(`  Posi√ß√£o: x=${rect.x}, y=${rect.y}`);
    // eslint-disable-next-line no-console
    console.log(`  Tamanho: ${rect.width}x${rect.height}`);
    // eslint-disable-next-line no-console
    console.log(`  Vis√≠vel (offsetParent): ${button.offsetParent !== null}`);
    // eslint-disable-next-line no-console
    console.log(`  Display: ${window.getComputedStyle(button).display}`);
    // eslint-disable-next-line no-console
    console.log(`  Visibility: ${window.getComputedStyle(button).visibility}`);
    // eslint-disable-next-line no-console
    console.log(`  Z-index: ${window.getComputedStyle(button).zIndex}`);

    // 3. AN√ÅLISE DE EVENTOS
    // eslint-disable-next-line no-console
    console.log('\n‚ö° AN√ÅLISE DE EVENTOS:');

    // Adiciona listener para detectar eventos
    const eventTypes = ['click', 'mousedown', 'mouseup', 'focus', 'keydown'];
    const listeners: { type: string; handler: EventListener }[] = [];

    eventTypes.forEach((eventType) => {
      const handler = (event: Event): void => {
        // eslint-disable-next-line no-console
        console.log(`  üéØ Evento capturado: ${eventType}`, event);
      };
      button.addEventListener(eventType, handler);
      listeners.push({ type: eventType, handler });
    });

    // 4. TESTE DE CLIQUE COM MONITORAMENTO
    // eslint-disable-next-line no-console
    console.log('\nüî¨ TESTE DE CLIQUE COM MONITORAMENTO:');

    // Estado inicial
    const initialState = button.getAttribute('aria-expanded');
    // eslint-disable-next-line no-console
    console.log(`  Estado inicial: aria-expanded="${initialState}"`);

    // Focus primeiro
    // eslint-disable-next-line no-console
    console.log('  üéØ Aplicando focus...');
    button.focus();
    await wait(100);

    // eslint-disable-next-line no-console
    console.log(
      `  Focus aplicado: document.activeElement === button: ${document.activeElement === button}`,
    );

    // Click
    // eslint-disable-next-line no-console
    console.log('  üñ±Ô∏è Executando click...');
    button.click();
    await wait(200);

    const afterClickState = button.getAttribute('aria-expanded');
    // eslint-disable-next-line no-console
    console.log(`  Estado ap√≥s click: aria-expanded="${afterClickState}"`);

    // 5. TESTE COM COORDENADAS EXATAS
    // eslint-disable-next-line no-console
    console.log('\nüìç TESTE COM COORDENADAS EXATAS:');

    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;

    // eslint-disable-next-line no-console
    console.log(`  Centro do bot√£o: (${centerX}, ${centerY})`);

    // Elemento no ponto exato
    const elementAtPoint = document.elementFromPoint(centerX, centerY);
    // eslint-disable-next-line no-console
    console.log(`  Elemento no centro: ${elementAtPoint?.tagName}.${elementAtPoint?.className}`);
    // eslint-disable-next-line no-console
    console.log(`  √â o mesmo elemento: ${elementAtPoint === button}`);

    // Click com coordenadas
    const coordClick = new MouseEvent('click', {
      bubbles: true,
      cancelable: true,
      view: window,
      clientX: centerX,
      clientY: centerY,
    });

    // eslint-disable-next-line no-console
    console.log('  üñ±Ô∏è Click com coordenadas...');
    button.dispatchEvent(coordClick);
    await wait(200);

    const afterCoordClickState = button.getAttribute('aria-expanded');
    // eslint-disable-next-line no-console
    console.log(`  Estado ap√≥s click coordenado: aria-expanded="${afterCoordClickState}"`);

    // 6. AN√ÅLISE DO CONTAINER PAI
    // eslint-disable-next-line no-console
    console.log('\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ AN√ÅLISE DO CONTAINER PAI:');
    const container = targetDropdown.container;
    // eslint-disable-next-line no-console
    console.log(`  Container tag: ${container.tagName}`);
    // eslint-disable-next-line no-console
    console.log(`  Container classes: ${container.className}`);

    // Teste de click no container
    // eslint-disable-next-line no-console
    console.log('  üñ±Ô∏è Testando click no container...');
    container.click();
    await wait(200);

    const afterContainerClickState = button.getAttribute('aria-expanded');
    // eslint-disable-next-line no-console
    console.log(`  Estado ap√≥s click no container: aria-expanded="${afterContainerClickState}"`);

    // 7. BUSCA POR ELEMENTOS BLOQUEADORES
    // eslint-disable-next-line no-console
    console.log('\nüö´ BUSCA POR ELEMENTOS BLOQUEADORES:');

    // Elementos que podem estar sobrepondo
    const overlayElements = document.querySelectorAll(
      '[style*="position: fixed"], [style*="position: absolute"], .overlay, .modal, .popup',
    );
    // eslint-disable-next-line no-console
    console.log(`  Elementos sobrepostos encontrados: ${overlayElements.length}`);

    overlayElements.forEach((overlay, index) => {
      if (overlay instanceof HTMLElement) {
        const overlayRect = overlay.getBoundingClientRect();
        const isOverButton =
          overlayRect.left <= centerX &&
          centerX <= overlayRect.right &&
          overlayRect.top <= centerY &&
          centerY <= overlayRect.bottom;

        if (isOverButton) {
          // eslint-disable-next-line no-console
          console.log(`  ‚ö†Ô∏è Elemento ${index + 1} pode estar bloqueando: ${overlay.className}`);
        }
      }
    });

    // Cleanup: remove event listeners
    listeners.forEach(({ type, handler }) => {
      button.removeEventListener(type, handler);
    });

    // eslint-disable-next-line no-console
    console.log('\nüéØ ========== FIM DO DIAGN√ìSTICO ==========');
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error('‚ùå Erro no diagn√≥stico:', error);
  }
};

/**
 * M√©todos avan√ßados para contornar prote√ß√£o contra eventos sint√©ticos
 * @param {DropdownType} type - Tipo do dropdown a ser acionado
 * @returns {Promise<boolean>} True se conseguiu abrir o dropdown
 */
export const triggerDropdownWithTrustedEvents = async (
  type: DropdownType = 'any',
): Promise<boolean> => {
  // eslint-disable-next-line no-console
  console.log(`üîì Tentando m√©todos com eventos trusted para "${type}"...`);

  try {
    const dropdowns = findMonacoDropdowns();

    if (dropdowns.length === 0) {
      // eslint-disable-next-line no-console
      console.error('‚ùå Nenhum dropdown encontrado');
      return false;
    }

    let targetDropdown: DropdownElement | undefined;

    if (type === 'any') {
      targetDropdown = dropdowns[0];
    } else {
      targetDropdown = dropdowns.find((d) => d.type === type);
    }

    if (!targetDropdown) {
      // eslint-disable-next-line no-console
      console.error(`‚ùå Dropdown do tipo "${type}" n√£o encontrado`);
      return false;
    }

    // eslint-disable-next-line no-console
    console.log(`üéØ Testando m√©todos trusted: ${targetDropdown.type} - "${targetDropdown.label}"`);

    // M√âTODO 1: Click no SPAN interno (baseado no diagn√≥stico)
    // eslint-disable-next-line no-console
    console.log('üîÑ M√©todo 1: Click no chat-model-label...');

    const chatModelLabel = targetDropdown.button.querySelector('.chat-model-label') as HTMLElement;
    if (chatModelLabel) {
      chatModelLabel.scrollIntoView({ behavior: 'smooth', block: 'center' });
      await wait(100);

      chatModelLabel.focus();
      await wait(50);

      chatModelLabel.click();
      await wait(150);

      const isExpanded1 = targetDropdown.button.getAttribute('aria-expanded') === 'true';
      if (isExpanded1) {
        // eslint-disable-next-line no-console
        console.log('‚úÖ M√©todo 1 funcionou! Dropdown aberto via chat-model-label.');
        return true;
      }
    }

    // M√âTODO 2: Keyboard Enter
    // eslint-disable-next-line no-console
    console.log('üîÑ M√©todo 2: Keyboard Enter...');

    targetDropdown.button.focus();
    await wait(50);

    const enterEvent = new KeyboardEvent('keydown', {
      key: 'Enter',
      code: 'Enter',
      keyCode: 13,
      which: 13,
      bubbles: true,
      cancelable: true,
    });
    targetDropdown.button.dispatchEvent(enterEvent);
    await wait(150);

    const isExpanded2 = targetDropdown.button.getAttribute('aria-expanded') === 'true';
    if (isExpanded2) {
      // eslint-disable-next-line no-console
      console.log('‚úÖ M√©todo 2 funcionou! Dropdown aberto via Enter.');
      return true;
    }

    // M√âTODO 3: Space key
    // eslint-disable-next-line no-console
    console.log('üîÑ M√©todo 3: Space key...');

    const spaceEvent = new KeyboardEvent('keydown', {
      key: ' ',
      code: 'Space',
      keyCode: 32,
      which: 32,
      bubbles: true,
      cancelable: true,
    });
    targetDropdown.button.dispatchEvent(spaceEvent);
    await wait(150);

    const isExpanded3 = targetDropdown.button.getAttribute('aria-expanded') === 'true';
    if (isExpanded3) {
      // eslint-disable-next-line no-console
      console.log('‚úÖ M√©todo 3 funcionou! Dropdown aberto via Space.');
      return true;
    }

    // M√âTODO 4: Atalho Cmd+. (espec√≠fico para Agent)
    if (type === 'agent') {
      // eslint-disable-next-line no-console
      console.log('üîÑ M√©todo 4: Atalho Cmd+. para Agent...');

      const cmdPeriodEvent = new KeyboardEvent('keydown', {
        key: '.',
        code: 'Period',
        keyCode: 190,
        which: 190,
        metaKey: true, // Cmd no Mac
        bubbles: true,
        cancelable: true,
      });

      document.dispatchEvent(cmdPeriodEvent);
      await wait(200);

      const isExpanded4 = targetDropdown.button.getAttribute('aria-expanded') === 'true';
      if (isExpanded4) {
        // eslint-disable-next-line no-console
        console.log('‚úÖ M√©todo 4 funcionou! Dropdown aberto via Cmd+.');
        return true;
      }
    }

    // M√âTODO 5: MouseDown + MouseUp sequence
    // eslint-disable-next-line no-console
    console.log('üîÑ M√©todo 5: MouseDown + MouseUp sequence...');

    const rect = targetDropdown.button.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;

    const mouseDownEvent = new MouseEvent('mousedown', {
      bubbles: true,
      cancelable: true,
      clientX: centerX,
      clientY: centerY,
      button: 0,
    });

    const mouseUpEvent = new MouseEvent('mouseup', {
      bubbles: true,
      cancelable: true,
      clientX: centerX,
      clientY: centerY,
      button: 0,
    });

    targetDropdown.button.dispatchEvent(mouseDownEvent);
    await wait(50);
    targetDropdown.button.dispatchEvent(mouseUpEvent);
    await wait(150);

    const isExpanded5 = targetDropdown.button.getAttribute('aria-expanded') === 'true';
    if (isExpanded5) {
      // eslint-disable-next-line no-console
      console.log('‚úÖ M√©todo 5 funcionou! Dropdown aberto via MouseDown+MouseUp.');
      return true;
    }

    // eslint-disable-next-line no-console
    console.error('‚ùå Todos os m√©todos trusted falharam.');
    return false;
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error('‚ùå Erro nos m√©todos trusted:', error);
    return false;
  }
};
